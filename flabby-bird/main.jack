class Main {  

   static int pipeSpacing;
   static int gameCounter;
  
   function void pipeShift(Array pipes, int numPipes) {
      var int i, pipeX, pipeY, pipeStep;
      var Pipe temp;
      //var Random rand;
      let temp = pipes[0];
      let pipeX = temp.getX();
      //let pipeStep = Pipe.getStep();
      let pipeY = pipeX + Pipe.getWidth();//pipeStep;
      
      if (pipeY < 0) {

         //let rand = Random.new();
         let pipes[numPipes - 1] = temp;
         let i = 1;

         while (i < numPipes) {
            let pipes[i-1] = pipes[i];
            let i = i + 1; 
         }
         // create new pipe off screen to the right
         do temp.reset(pipeX + ((pipeSpacing + Pipe.getWidth()) * numPipes));
         //do temp.dispose();
         //do rand.dispose();
      }
      return;
   }

   function void move(Bird bird, Array pipes, int numPipes) {
      // move all geos
      var int i;
      var Pipe temp;
      let i = 0;
      do bird.moveBird();
      do bird.drawBird();
      if (gameCounter > 1) {
         do Main.pipeShift(pipes, numPipes);
         while (i < numPipes) {
            let temp = pipes[i];
            do temp.movePipe();
            do temp.drawPipe();
            let i = i + 1;
         }
         let gameCounter = 0;
      }
      return;
   }

   function void draw(Bird bird, Array pipes, int numPipes) {
      // draw all geos
      var int j;
      var Pipe temp;
      let j = 0;
      //do Screen.setColor(true);
      do bird.drawBird();
      while (j < numPipes) {
         let temp = pipes[j];
         do temp.drawPipe();
         let j = j + 1;
      }      
      return;
   }

   function bool checkCollisions(Bird bird, Array pipes) {
      // if the bird collides with a pipe return true
      // unimplemented
      return false;
   }

   function bool checkPipeCleared(Bird bird, Array pipes) {
      // if the bird cleared a pipe return true
      // unimplemented
      return false;
   }


   function void main() {
      
      var Array pipes;
      var Bird bird;
      var int step, numPipes, score;//, pipeSpacing;
      var bool alive;
      var int i;
      var Pipe temp;

      var int xPos, height;
      //var Random rand;

      //let rand = Random.new();
      let step = 10;
      let pipeSpacing = 160;
      let alive = true;
      let numPipes = 5;
      let score = 0;
      let i = 0;
      let bird = Bird.new(75, 100, 10);
      let pipes = Array.new(numPipes);
      do Pipe.init();
      while (i < numPipes) {
         let xPos = 480 + ((pipeSpacing + Pipe.getWidth()) * i);
         //let height = rand.generate(33);
         let pipes[i] = Pipe.new(xPos);
         let i = i + 1;
      }
      
      while (alive) {

         do Main.move(bird, pipes, numPipes);

         // each frame move all elements on the screen and check for collisions
         if (Main.checkCollisions(bird, pipes)) {
            let alive = false;
         }

         //do Main.draw(bird, pipes, numPipes);

         if (Main.checkPipeCleared(bird, pipes)) {
            let score = score + 1;
         }

         let gameCounter = gameCounter + 1;
         do Sys.wait(200);
      }

      do pipes.dispose();
      do bird.dispose();
      //do rand.dispose();
      return;
   }
}