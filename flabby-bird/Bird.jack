class Bird {

    field int xPos, yPos, radius, lastY;
    field int gravity;
    

    constructor Bird new(int x, int y, int r) {
        let xPos = x;
        let yPos = y;
        let radius = r;
        let lastY = y;
        return this;
    }

    method void moveBird() {
        // need to implement gravity so this looks natural
        // maybe store last few frames and take an array of frames as arg?
        let lastY = yPos;
        if (Keyboard.keyPressed() = 131) {
            let gravity = 0;
            if ((yPos - 40) > -1) {
                let yPos = yPos - 40; 
            } // don't allow bird to jump off screen
            else {let yPos = 0;}
        }
        else {
            let gravity = gravity + 5;
            // don't allow bird to fall off screen
            let yPos = Math.min(yPos + gravity, 244);
        }
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void drawBird() {
        var int memAddress;
        let memAddress = 16384 + (lastY * 32) + (xPos / 16);
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        let memAddress = 16384 + (yPos * 32) + (xPos / 16);
        do Memory.poke(memAddress+0, 4032);
        do Memory.poke(memAddress+32, 4656);
        do Memory.poke(memAddress+64, 8456);
        do Memory.poke(memAddress+96, 20740);
        do Memory.poke(memAddress+128, 20740);
        do Memory.poke(memAddress+160, 16958);
        do Memory.poke(memAddress+192, -959);
        do Memory.poke(memAddress+224, -32191);
        do Memory.poke(memAddress+256, -706);
        do Memory.poke(memAddress+288, -32252);
        do Memory.poke(memAddress+320, 31768);
        do Memory.poke(memAddress+352, 992);

        return;
        do Screen.setColor(false);
        do Screen.drawCircle(xPos, lastY, radius);
        do Screen.setColor(true);
        if (yPos < radius | yPos > (255 - radius)) {
            // YOU LOSE (unimplemented)
            return;
        }
        do Screen.drawCircle(xPos, yPos, radius);
        return;
    }
}