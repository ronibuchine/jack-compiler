<class>
    <keyword> class </keyword>
    <identifier> floogle </identifier>
    <symbol> { </symbol>
    <subroutineDec>
        <keyword> constructor </keyword>
        <identifier> floogle </identifier>
        <identifier> new </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> int </keyword>
            <identifier> a </identifier>
            <symbol> , </symbol>
            <keyword> char </keyword>
            <identifier> b </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <statement>
                    <letStatement>
                        <keyword> let </keyword>
                        <identifier> bar </identifier>
                        <symbol> = </symbol>
                        <expression>
                            <term>
                                <stringConstant> baz </stringConstant>
                            </term>
                        </expression>
                        <symbol> ; </symbol>
                    </letStatement>
                </statement>
                <statement>
                    <letStatement>
                        <keyword> let </keyword>
                        <identifier> floo </identifier>
                        <symbol> = </symbol>
                        <expression>
                            <term>
                                <keyword> true </keyword>
                            </term>
                        </expression>
                        <symbol> ; </symbol>
                    </letStatement>
                </statement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> bar </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> int </keyword>
            <identifier> a </identifier>
            <symbol> , </symbol>
            <keyword> char </keyword>
            <identifier> b </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <statement>
                    <letStatement>
                        <keyword> let </keyword>
                        <identifier> i </identifier>
                        <symbol> = </symbol>
                        <expression>
                            <term>
                                <integerConstant> 42 </integerConstant>
                            </term>
                        </expression>
                        <symbol> ; </symbol>
                    </letStatement>
                </statement>
                <statement>
                    <ifStatement>
                        <keyword> if </keyword>
                        <symbol> ( </symbol>
                        <expression>
                            <term>
                                <identifier> i </identifier>
                            </term>
                            <symbol> &amp;gt </symbol>
                            <term>
                                <integerConstant> 17 </integerConstant>
                            </term>
                        </expression>
                        <symbol> ) </symbol>
                        <symbol> { </symbol>
                        <statements>
                            <statement>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> blarb </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <stringConstant> hello </stringConstant>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statement>
                            <statement>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> world </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <stringConstant> world </stringConstant>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statement>
                        </statements>
                        <symbol> } </symbol>
                    </ifStatement>
                </statement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <symbol> } </symbol>
</class>